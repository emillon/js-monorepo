--- test_regular_variants.ml	2021-10-12 17:08:21.820580043 +0200
+++ test_polymorphic_variants.ml	2021-10-12 17:08:21.816580106 +0200
@@ -4,8 +4,9 @@
 
 module Nullary = struct
   type 'a t =
-    | A
-    | B
+    [ `A
+    | `B
+    ]
   [@@deriving_inline sexp_grammar]
 
   let _ = fun (_ : 'a t) -> ()
@@ -16,14 +17,14 @@
     Ppx_sexp_conv_lib.Sexp.Private.Raw_grammar.generic_group) =
     {
       implicit_vars = [];
-      ggid = "\239\242\007o\016\222\178\133\218\153\146w\129\255\167\208";
+      ggid = "\133a\241\019; \198\184U\181\220#\191\190\200\b";
       types =
         [("t",
            (Explicit_bind
               (["a"],
                 (Variant
                    {
-                     ignore_capitalization = true;
+                     ignore_capitalization = false;
                      alts = [("A", []); ("B", [])]
                    }))))]
     } in
@@ -33,7 +34,7 @@
       apply_implicit = [];
       generic_group = _the_generic_group;
       origin =
-        "ppx_sexp_conv.v0.14.3/test/expect/test_regular_variants.ml.Nullary"
+        "ppx_sexp_conv.v0.14.3/test/expect/test_polymorphic_variants.ml.Nullary"
     } in
   let (t_sexp_grammar : Ppx_sexp_conv_lib.Sexp.Private.Raw_grammar.t) =
     Ref ("t", _the_group) in
@@ -48,14 +49,16 @@
 module With_arguments = struct
   module With_sexp = struct
     type t =
-      | A of int * int
-      | B of string
+      [ `A of int * int
+      | `B of string
+      ]
     [@@deriving sexp_of]
   end
 
-  type t = With_sexp.t =
-    | A of int * int
-    | B of string
+  type t =
+    [ `A of int * int
+    | `B of string
+    ]
   [@@deriving_inline sexp_grammar]
 
   let _ = fun (_ : t) -> ()
@@ -66,14 +69,15 @@
     Ppx_sexp_conv_lib.Sexp.Private.Raw_grammar.generic_group) =
     {
       implicit_vars = ["int"; "string"];
-      ggid = "B\127\229(\029\022\255\"\167ab\178F\134\201\234";
+      ggid = "\196t P\169\167\173C\251\132\141N\003n \132";
       types =
         [("t",
            (Variant
               {
-                ignore_capitalization = true;
+                ignore_capitalization = false;
                 alts =
-                  [("A", [One (Implicit_var 0); One (Implicit_var 0)]);
+                  [("A",
+                     [One (List [One (Implicit_var 0); One (Implicit_var 0)])]);
                   ("B", [One (Implicit_var 1)])]
               }))]
     } in
@@ -83,7 +87,7 @@
       apply_implicit = [int_sexp_grammar; string_sexp_grammar];
       generic_group = _the_generic_group;
       origin =
-        "ppx_sexp_conv.v0.14.3/test/expect/test_regular_variants.ml.With_arguments"
+        "ppx_sexp_conv.v0.14.3/test/expect/test_polymorphic_variants.ml.With_arguments"
     } in
   let (t_sexp_grammar : Ppx_sexp_conv_lib.Sexp.Private.Raw_grammar.t) =
     Ref ("t", _the_group) in
@@ -97,10 +101,10 @@
   open Expect_test_helpers_core
 
   let%expect_test _ =
-    print_s (With_sexp.sexp_of_t (A (1, 2)));
-    print_s (With_sexp.sexp_of_t (B "foo"));
+    print_s (With_sexp.sexp_of_t (`A (1, 2)));
+    print_s (With_sexp.sexp_of_t (`B "foo"));
     [%expect {|
-      (A 1 2)
+      (A (1 2))
       (B foo) |}]
   ;;
 end
@@ -108,18 +112,20 @@
 module Sexp_list = struct
   module With_sexp = struct
     type t =
-      | Int           of int
-      | List          of int list
-      | Sexp_dot_list of int list [@sexp.list]
-      | Sexp_list     of int sexp_list [@warning "-3"]
+      [ `Int           of int
+      | `List          of int list
+      | `Sexp_dot_list of int list [@sexp.list]
+      | `Sexp_list     of int sexp_list [@warning "-3"]
+      ]
     [@@deriving sexp]
   end
 
-  type t = With_sexp.t =
-    | Int           of int
-    | List          of int list
-    | Sexp_dot_list of int list [@sexp.list]
-    | Sexp_list     of int sexp_list [@warning "-3"]
+  type t =
+    [ `Int           of int
+    | `List          of int list
+    | `Sexp_dot_list of int list [@sexp.list]
+    | `Sexp_list     of int sexp_list [@warning "-3"]
+    ]
   [@@deriving_inline sexp_grammar]
 
   let _ = fun (_ : t) -> ()
@@ -130,12 +136,12 @@
     Ppx_sexp_conv_lib.Sexp.Private.Raw_grammar.generic_group) =
     {
       implicit_vars = ["int"; "list"];
-      ggid = "\219\014J\247\148Iq\193\248\rk\216J\012\200\152";
+      ggid = "\221\2240I,\229H~\212(;\201\127\159rK";
       types =
         [("t",
            (Variant
               {
-                ignore_capitalization = true;
+                ignore_capitalization = false;
                 alts =
                   [("Int", [One (Implicit_var 0)]);
                   ("List",
@@ -150,7 +156,7 @@
       apply_implicit = [int_sexp_grammar; list_sexp_grammar];
       generic_group = _the_generic_group;
       origin =
-        "ppx_sexp_conv.v0.14.3/test/expect/test_regular_variants.ml.Sexp_list"
+        "ppx_sexp_conv.v0.14.3/test/expect/test_polymorphic_variants.ml.Sexp_list"
     } in
   let (t_sexp_grammar : Ppx_sexp_conv_lib.Sexp.Private.Raw_grammar.t) =
     Ref ("t", _the_group) in
@@ -166,11 +172,11 @@
   open Expect_test_helpers_core
 
   let%expect_test _ =
-    print_s (With_sexp.sexp_of_t (Int 1));
+    print_s (With_sexp.sexp_of_t (`Int 1));
     List.iter [ []; [ 1 ]; [ 1; 2 ] ] ~f:(fun l ->
-      print_s (With_sexp.sexp_of_t (List          l ));
-      print_s (With_sexp.sexp_of_t (Sexp_dot_list l ));
-      print_s (With_sexp.sexp_of_t (Sexp_list     l)));
+      print_s (With_sexp.sexp_of_t (`List          l ));
+      print_s (With_sexp.sexp_of_t (`Sexp_dot_list l ));
+      print_s (With_sexp.sexp_of_t (`Sexp_list     l)));
     [%expect
       {|
       (Int 1)
