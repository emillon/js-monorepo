open! Import

let keywords s = String.split_lines s |> List.map ~f:String.strip

let verilog =
  keywords
    {| and
       always
       assign
       attribute
       begin
       buf
       bufif0
       bufif1
       case
       cmos
       deassign
       default
       defparam
       disable
       else
       endattribute
       end
       endcase
       endfunction
       endprimitive
       endmodule
       endtable
       endtask
       event
       for
       force
       forever
       fork
       function
       highhz0
       highhz1
       if
       initial
       inout
       input
       integer
       join
       large
       medium
       module
       nand
       negedge
       nor
       not
       notif0
       notif1
       nmos
       or
       output
       parameter
       pmos
       posedge
       primitive
       pulldown
       pullup
       pull0
       pull1
       rcmos
       reg
       release
       repeat
       rnmos
       rpmos
       rtran
       rtranif0
       rtranif1
       scalared
       small
       specify
       specparam
       strong0
       strong1
       supply0
       supply1
       table
       task
       tran
       tranif0
       tranif1
       time
       tri
       triand
       trior
       trireg
       tri0
       tri1
       vectored
       wait
       wand
       weak0
       weak1
       while
       wire
       wor |}
;;

let vhdl =
  keywords
    {| abs
       access
       after
       alias
       all
       and
       architecture
       array
       assert
       attribute
       begin
       block
       body
       buffer
       bus
       case
       component
       configuration
       constant
       disconnect
       downto
       else
       elsif
       end
       entity
       exit
       file
       for
       function
       generate
       generic
       group
       guarded
       if
       impure
       in
       inertial
       inout
       is
       label
       library
       linkage
       literal
       loop
       map
       mod
       nand
       new
       next
       nor
       not
       null
       of
       on
       open
       or
       others
       out
       package
       port
       postponed
       procedure
       process
       pure
       range
       record
       register
       reject
       return
       rol
       ror
       select
       severity
       signal
       shared
       sla
       sli
       sra
       srl
       subtype
       then
       to
       transport
       type
       unaffected
       units
       until
       use
       variable
       wait
       when
       while
       with
       xnor
       xor |}
;;

(* From the OCaml source code: src/parsing/lexer.mll:38 *)
let ocaml =
  keywords
    {| and
       as
       assert
       begin
       class
       constraint
       do
       done
       downto
       else
       end
       exception
       external
       false
       for
       fun
       function
       functor
       if
       in
       include
       inherit
       initializer
       lazy
       let
       match
       method
       module
       mutable
       new
       nonrec
       object
       of
       open
       or
       private
       rec
       sig
       struct
       then
       to
       true
       try
       type
       val
       virtual
       when
       while
       with
       lor
       lxor
       mod
       land
       lsl
       lsr
       asr |}
;;
